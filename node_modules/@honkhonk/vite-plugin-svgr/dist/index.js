"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const esbuild_1 = require("esbuild");
const svgr = require('@svgr/core').default;
function svgrPlugin(options = {}) {
    const transformed = [];
    return {
        name: 'vite:svgr',
        async transform(code, id) {
            if (!id.endsWith('.svg?component')) {
                return null;
            }
            const svgDataPath = id.replace('?component', '');
            const svgData = await fs_1.default.promises.readFile(svgDataPath, 'utf8');
            const svgrOptions = (options === null || options === void 0 ? void 0 : options.svgrOptions) || {};
            const componentCode = await svgr(svgData, svgrOptions, { filePath: svgDataPath });
            const component = await esbuild_1.transform(componentCode, { loader: 'jsx' });
            transformed.push(id);
            return { code: component.code, map: null };
        },
        generateBundle(config, bundle) {
            if (options.keepEmittedAssets) {
                return;
            }
            for (const [key, bundleEntry] of Object.entries(bundle)) {
                const { type, name } = bundleEntry;
                if (type === 'asset' &&
                    (name === null || name === void 0 ? void 0 : name.endsWith('.svg')) &&
                    transformed.findIndex((id) => id.includes(name)) >= 0) {
                    delete bundle[key];
                }
            }
        }
    };
}
exports.default = svgrPlugin;
